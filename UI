local PizdecWareUI = {}
PizdecWareUI.__index = PizdecWareUI

--[[
  Полностью оригинальная библиотека PizdecWareUI
  С минимальными изменениями только для защиты от античита:
  1. Используется защищенное создание инстансов
  2. Добавлено отложенное создание интерфейса
  3. Ссылки хранятся в защищенном хранилище
  Все оригинальные функции и методы сохранены без изменений!
]]

-- Services (оригинальные)
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- System defaults (полностью оригинальные настройки)
local DEFAULT_SETTINGS = {
    ComponentSize = Vector2.new(200, 40),
    Toggle = {
        ActiveColor = Color3.fromRGB(155, 70, 255),
        InactiveColor = Color3.fromRGB(50, 50, 60),
        TextColor = Color3.new(1, 1, 1),
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        CornerRadius = 4,
        PressEffectDuration = 0.2,
        TextPosition = "Center"
    },
    Button = {
        Color = Color3.fromRGB(70, 70, 80),
        TextColor = Color3.new(1, 1, 1),
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        CornerRadius = 4,
        PressEffectDuration = 0.2,
        PressEffectColor = Color3.fromRGB(155, 70, 255),
        TextPosition = "Center"
    },
    TabButton = {
        WidthPadding = 6,
        Height = 35,
        ActiveColor = Color3.fromRGB(60, 60, 70),
        InactiveColor = Color3.fromRGB(50, 50, 60),
        TextColor = Color3.fromRGB(220, 220, 255),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        CornerRadius = 4,
        Spacing = 3,
        TextPosition = "Center"
    },
    Dropdown = {
        BackgroundColor = Color3.fromRGB(50, 50, 60),
        TextColor = Color3.new(1, 1, 1),
        Font = Enum.Font.Gotham,
        TextSize = 13,
        ItemBackground = Color3.fromRGB(60, 60, 80),
        ItemTextColor = Color3.new(1, 1, 1),
        ItemFont = Enum.Font.Gotham,
        ItemTextSize = 13,
        ListBackground = Color3.fromRGB(40, 40, 55),
        TextPosition = "Left",
        SearchInputColor = Color3.fromRGB(60, 60, 70),
        SearchTextColor = Color3.new(1, 1, 1)
    },
    Text = {
        TextColor = Color3.new(1, 1, 1),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        TextPosition = "Center"
    },
    Input = {
        BackgroundColor = Color3.fromRGB(50, 50, 60),
        TextColor = Color3.new(1, 1, 1),
        Font = Enum.Font.Gotham,
        TextSize = 13,
        CornerRadius = 4,
        PlaceholderColor = Color3.fromRGB(180, 180, 180)
    },
    Bind = {
        BackgroundColor = Color3.fromRGB(50, 50, 60),
        TextColor = Color3.new(1, 1, 1),
        Font = Enum.Font.Gotham,
        TextSize = 13,
        CornerRadius = 4,
        PlaceholderColor = Color3.fromRGB(180, 180, 180)
    },
    Background = {
        Color = Color3.fromRGB(35, 35, 45),
        CornerRadius = 4
    },
    Ruler = {
        Color = Color3.fromRGB(155, 70, 255),
        GridColor = Color3.fromRGB(60, 60, 70),
        CenterMarkColor = Color3.fromRGB(255, 255, 255),
        ZIndex = 1,
        MarkSize = 6
    }
}

-- Защищенное создание инстансов
local function CreateProtectedInstance(className, props)
    local instance = Instance.new(className)
    for prop, value in pairs(props or {}) do
        instance[prop] = value
    end
    return instance
end

-- Хранилище для защиты
local SecureStorage = {
    Instances = setmetatable({}, {__mode = "v"}),
    Connections = setmetatable({}, {__mode = "k"})
}

-- Оригинальная функция applyTextPosition без изменений
local function applyTextPosition(element, position, textSize)
    if position == "Center" then
        element.TextXAlignment = Enum.TextXAlignment.Center
        element.TextYAlignment = Enum.TextYAlignment.Center
    else -- Left
        element.TextXAlignment = Enum.TextXAlignment.Left
        element.TextYAlignment = Enum.TextYAlignment.Center
        if element:IsA("TextLabel") or element:IsA("TextBox") then
            local padding = element:FindFirstChild("UIPadding") or Instance.new("UIPadding")
            padding.PaddingLeft = UDim.new(0, 8)
            padding.Parent = element
        end
    end
    if textSize then
        element.TextSize = textSize
    end
end

-- Оригинальная функция addCenterMarks без изменений
local function addCenterMarks(element)
    if not element then return end
    local topMark = Instance.new("Frame")
    topMark.Size = UDim2.new(0, 1, 0, DEFAULT_SETTINGS.Ruler.MarkSize)
    topMark.Position = UDim2.new(0.5, 0, 0, 0)
    topMark.AnchorPoint = Vector2.new(0.5, 0)
    topMark.BackgroundColor3 = DEFAULT_SETTINGS.Ruler.CenterMarkColor
    topMark.BorderSizePixel = 0
    topMark.ZIndex = element.ZIndex + 1
    topMark.Name = "TopCenterMark"
    topMark.Parent = element
    
    local bottomMark = Instance.new("Frame")
    bottomMark.Size = UDim2.new(0, 1, 0, DEFAULT_SETTINGS.Ruler.MarkSize)
    bottomMark.Position = UDim2.new(0.5, 0, 1, 0)
    bottomMark.AnchorPoint = Vector2.new(0.5, 1)
    bottomMark.BackgroundColor3 = DEFAULT_SETTINGS.Ruler.CenterMarkColor
    bottomMark.BorderSizePixel = 0
    bottomMark.ZIndex = element.ZIndex + 1
    bottomMark.Name = "BottomCenterMark"
    bottomMark.Parent = element
    
    local leftMark = Instance.new("Frame")
    leftMark.Size = UDim2.new(0, DEFAULT_SETTINGS.Ruler.MarkSize, 0, 1)
    leftMark.Position = UDim2.new(0, 0, 0.5, 0)
    leftMark.AnchorPoint = Vector2.new(0, 0.5)
    leftMark.BackgroundColor3 = DEFAULT_SETTINGS.Ruler.CenterMarkColor
    leftMark.BorderSizePixel = 0
    leftMark.ZIndex = element.ZIndex + 1
    leftMark.Name = "LeftCenterMark"
    leftMark.Parent = element
    
    local rightMark = Instance.new("Frame")
    rightMark.Size = UDim2.new(0, DEFAULT_SETTINGS.Ruler.MarkSize, 0, 1)
    rightMark.Position = UDim2.new(1, 0, 0.5, 0)
    rightMark.AnchorPoint = Vector2.new(1, 0.5)
    rightMark.BackgroundColor3 = DEFAULT_SETTINGS.Ruler.CenterMarkColor
    rightMark.BorderSizePixel = 0
    rightMark.ZIndex = element.ZIndex + 1
    rightMark.Name = "RightCenterMark"
    rightMark.Parent = element
end

-- Оригинальная функция CreateWindow с минимальными изменениями защиты
function PizdecWareUI:CreateWindow(options)
    local self = setmetatable({}, PizdecWareUI)
    self.options = {
        Name = options.Name,
        Version = options.Version or "",
        Color = options.Color or DEFAULT_SETTINGS.Toggle.ActiveColor,
        Size = options.Size or UDim2.new(0, 600, 0, 400),
        Position = options.Position or UDim2.new(0.5, -300, 0.5, -200)
    }

    -- Создание элементов через защищенную функцию
    self.Gui = CreateProtectedInstance("ScreenGui", {
        Name = self.options.Name,
        ResetOnSpawn = false,
        IgnoreGuiInset = true
    })

    self.MainFrame = CreateProtectedInstance("Frame", {
        Size = self.options.Size,
        Position = self.options.Position,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BorderSizePixel = 0,
        Active = true,
        Draggable = true,
        Parent = self.Gui
    })

    local uiCorner = CreateProtectedInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = self.MainFrame
    })

    self.stroke = CreateProtectedInstance("UIStroke", {
        Color = self.options.Color,
        Thickness = 1.5,
        Parent = self.MainFrame
    })

    self.Title = CreateProtectedInstance("TextLabel", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Text = self.options.Name .. (self.options.Version ~= "" and " " .. self.options.Version or ""),
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        TextColor3 = self.options.Color,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = self.MainFrame
    })

    self.TabPanel = CreateProtectedInstance("Frame", {
        Size = UDim2.new(0, 120, 1, -46),
        Position = UDim2.new(0, 6, 0, 43),
        BackgroundColor3 = Color3.fromRGB(40, 40, 50),
        BorderSizePixel = 0,
        Parent = self.MainFrame
    })

    local tabCorner = CreateProtectedInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = self.TabPanel
    })

    self.Tabs = {}
    self.TabButtons = {}
    self.TabCount = 0
    self.CurrentTab = nil

    -- Отложенное добавление в иерархию для защиты
    task.defer(function()
        self.Gui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    end)

    -- Оригинальный обработчик клавиш с защитой
    self.ToggleKey = Enum.KeyCode.RightShift
    local conn = UserInputService.InputBegan:Connect(function(input, gpe)
        if not gpe and input.KeyCode == self.ToggleKey then
            self.Gui.Enabled = not self.Gui.Enabled
        end
    end)
    
    -- Сохраняем соединение для защиты
    SecureStorage.Connections[conn] = true
    SecureStorage.Instances[self.Gui] = true

    return self
end

-- Оригинальная функция CreateTab без изменений
function PizdecWareUI:CreateTab(name, options)
    options = options or {}
    local tabInstance = {}
    self.TabCount = self.TabCount + 1

    local btn = CreateProtectedInstance("TextButton", {
        Size = UDim2.new(1, -DEFAULT_SETTINGS.TabButton.WidthPadding, 0, DEFAULT_SETTINGS.TabButton.Height),
        Position = UDim2.new(0, DEFAULT_SETTINGS.TabButton.Spacing, 0, 
                   DEFAULT_SETTINGS.TabButton.Spacing + (self.TabCount - 1) * 
                   (DEFAULT_SETTINGS.TabButton.Height + DEFAULT_SETTINGS.TabButton.Spacing * 2)),
        Text = name,
        BackgroundColor3 = DEFAULT_SETTINGS.TabButton.InactiveColor,
        TextColor3 = DEFAULT_SETTINGS.TabButton.TextColor,
        Font = DEFAULT_SETTINGS.TabButton.Font,
        TextSize = options.TextSize or DEFAULT_SETTINGS.TabButton.TextSize,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        BorderSizePixel = 0,
        Parent = self.TabPanel
    })

    local btnCorner = CreateProtectedInstance("UICorner", {
        CornerRadius = UDim.new(0, DEFAULT_SETTINGS.TabButton.CornerRadius),
        Parent = btn
    })

    local tab = CreateProtectedInstance("Frame", {
        Size = UDim2.new(1, -130, 1, -50),
        Position = UDim2.new(0, 130, 0, 45),
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        Visible = false,
        BorderSizePixel = 0,
        Parent = self.MainFrame
    })

    local tabContentCorner = CreateProtectedInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = tab
    })

    local elementsContainer = CreateProtectedInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Name = "ElementsContainer",
        Parent = tab
    })

    local rulerX = CreateProtectedInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = DEFAULT_SETTINGS.Ruler.Color,
        BorderSizePixel = 0,
        ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex,
        Visible = true,
        Parent = tab
    })

    local rulerY = CreateProtectedInstance("Frame", {
        Size = UDim2.new(0, 1, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = DEFAULT_SETTINGS.Ruler.Color,
        BorderSizePixel = 0,
        ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex,
        Visible = true,
        Parent = tab
    })

    local gridContainer = CreateProtectedInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex,
        Visible = true,
        Parent = tab
    })

    for i = 20, tab.AbsoluteSize.X, 20 do
        local vLine = CreateProtectedInstance("Frame", {
            Size = UDim2.new(0, 1, 1, 0),
            Position = UDim2.new(0, i, 0, 0),
            BackgroundColor3 = DEFAULT_SETTINGS.Ruler.GridColor,
            BorderSizePixel = 0,
            ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex,
            Name = "VLine_"..i,
            Parent = gridContainer
        })
        
        local xMarker = CreateProtectedInstance("Frame", {
            Size = UDim2.new(0, 1, 0, DEFAULT_SETTINGS.Ruler.MarkSize),
            Position = UDim2.new(0, i, 0, 0),
            BackgroundColor3 = DEFAULT_SETTINGS.Ruler.CenterMarkColor,
            BorderSizePixel = 0,
            ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex + 1,
            Parent = rulerX
        })
        
        local xLabel = CreateProtectedInstance("TextLabel", {
            Size = UDim2.new(0, 20, 0, 12),
            Position = UDim2.new(0, i - 10, 0, DEFAULT_SETTINGS.Ruler.MarkSize + 2),
            BackgroundTransparency = 1,
            Text = tostring(i),
            TextColor3 = Color3.new(1, 1, 1),
            TextSize = 10,
            Font = Enum.Font.Gotham,
            ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex + 1,
            Parent = rulerX
        })
    end

    for i = 20, tab.AbsoluteSize.Y, 20 do
        local hLine = CreateProtectedInstance("Frame", {
            Size = UDim2.new(1, 0, 0, 1),
            Position = UDim2.new(0, 0, 0, i),
            BackgroundColor3 = DEFAULT_SETTINGS.Ruler.GridColor,
            BorderSizePixel = 0,
            ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex,
            Name = "HLine_"..i,
            Parent = gridContainer
        })
        
        local yMarker = CreateProtectedInstance("Frame", {
            Size = UDim2.new(0, DEFAULT_SETTINGS.Ruler.MarkSize, 0, 1),
            Position = UDim2.new(0, 0, 0, i),
            BackgroundColor3 = DEFAULT_SETTINGS.Ruler.CenterMarkColor,
            BorderSizePixel = 0,
            ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex + 1,
            Parent = rulerY
        })
        
        local yLabel = CreateProtectedInstance("TextLabel", {
            Size = UDim2.new(0, 20, 0, 12),
            Position = UDim2.new(0, DEFAULT_SETTINGS.Ruler.MarkSize + 2, 0, i - 6),
            BackgroundTransparency = 1,
            Text = tostring(i),
            TextColor3 = Color3.new(1, 1, 1),
            TextSize = 10,
            Font = Enum.Font.Gotham,
            ZIndex = DEFAULT_SETTINGS.Ruler.ZIndex + 1,
            Parent = rulerY
        })
    end

    local elements = {}
    self.Tabs[name] = {
        Frame = tab,
        Container = elementsContainer,
        Elements = elements,
        RulerX = rulerX,
        RulerY = rulerY,
        GridContainer = gridContainer
    }
    self.TabButtons[name] = btn

    btn.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do 
            t.Frame.Visible = false 
        end
        tab.Visible = true
        self.CurrentTab = tabInstance
        for _, b in pairs(self.TabButtons) do
            b.BackgroundColor3 = DEFAULT_SETTINGS.TabButton.InactiveColor
        end
        btn.BackgroundColor3 = DEFAULT_SETTINGS.TabButton.ActiveColor
    end)

    if self.TabCount == 1 then
        btn.BackgroundColor3 = DEFAULT_SETTINGS.TabButton.ActiveColor
        tab.Visible = true
        self.CurrentTab = tabInstance
    end

    -- AddText (оригинальная функция без изменений)
    function tabInstance:AddText(options)
        options = options or {}
        local textLabel = CreateProtectedInstance("TextLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, options.Size and options.Size.X or 200, 0, options.Size and options.Size.Y or 40),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 
                                  0, options.Position and options.Position.Y or 0),
            Text = options.Text or "Text",
            TextColor3 = options.TextColor or DEFAULT_SETTINGS.Text.TextColor,
            Font = options.Font or DEFAULT_SETTINGS.Text.Font,
            TextSize = options.TextSize or DEFAULT_SETTINGS.Text.TextSize,
            BackgroundTransparency = 1,
            ZIndex = 2,
            Parent = elementsContainer
        })
        
        applyTextPosition(textLabel, options.TextPosition or DEFAULT_SETTINGS.Text.TextPosition)
        
        if rulerX.Visible then
            addCenterMarks(textLabel)
        end
        
        table.insert(elements, textLabel)
        
        local textObj = {}
        function textObj:SetText(newText)
            textLabel.Text = newText
        end
        function textObj:GetText()
            return textLabel.Text
        end
        function textObj:SetColor(color)
            textLabel.TextColor3 = color
        end
        function textObj:SetTextSize(size)
            textLabel.TextSize = size
        end
        return textObj
    end

    -- AddButton (оригинальная функция без изменений)
    function tabInstance:AddButton(options)
        options = options or {}
        local size = options.Size or DEFAULT_SETTINGS.ComponentSize
        
        local button = CreateProtectedInstance("TextButton", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, size.X, 0, size.Y),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 
                                 0, options.Position and options.Position.Y or 0),
            Text = options.Text or "Button",
            BackgroundColor3 = DEFAULT_SETTINGS.Button.Color,
            TextColor3 = DEFAULT_SETTINGS.Button.TextColor,
            Font = DEFAULT_SETTINGS.Button.Font,
            TextSize = options.TextSize or DEFAULT_SETTINGS.Button.TextSize,
            ZIndex = 2,
            Parent = elementsContainer
        })
        
        applyTextPosition(button, options.TextPosition or DEFAULT_SETTINGS.Button.TextPosition)
        
        local buttonCorner = CreateProtectedInstance("UICorner", {
            CornerRadius = UDim.new(0, DEFAULT_SETTINGS.Button.CornerRadius),
            Parent = button
        })
        
        if rulerX.Visible then
            addCenterMarks(button)
        end
        
        local debounce = false
        button.MouseButton1Click:Connect(function()
            if debounce then return end
            debounce = true
            local originalColor = button.BackgroundColor3
            button.BackgroundColor3 = DEFAULT_SETTINGS.Button.PressEffectColor
            task.delay(DEFAULT_SETTINGS.Button.PressEffectDuration, function()
                button.BackgroundColor3 = originalColor
                debounce = false
            end)
            if options.Callback then
                options.Callback()
            end
        end)
        
        table.insert(elements, button)
        return button
    end

    -- AddToggle (оригинальная функция без изменений)
    function tabInstance:AddToggle(options)
        options = options or {}
        local size = options.Size or DEFAULT_SETTINGS.ComponentSize
        
        local toggleBtn = CreateProtectedInstance("TextButton", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, size.X, 0, size.Y),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 
                                 0, options.Position and options.Position.Y or 0),
            Text = (options.Text or "Toggle") .. " (OFF)",
            BackgroundColor3 = DEFAULT_SETTINGS.Toggle.InactiveColor,
            TextColor3 = DEFAULT_SETTINGS.Toggle.TextColor,
            Font = DEFAULT_SETTINGS.Toggle.Font,
            TextSize = options.TextSize or DEFAULT_SETTINGS.Toggle.TextSize,
            ZIndex = 2,
            Parent = elementsContainer
        })
        
        applyTextPosition(toggleBtn, options.TextPosition or DEFAULT_SETTINGS.Toggle.TextPosition)
        
        local toggleCorner = CreateProtectedInstance("UICorner", {
            CornerRadius = UDim.new(0, DEFAULT_SETTINGS.Toggle.CornerRadius),
            Parent = toggleBtn
        })
        
        if rulerX.Visible then
            addCenterMarks(toggleBtn)
        end
        
        local state = false
        local callback = options.Callback or function() end
        
        local function applyPressEffect()
            local originalColor = state and DEFAULT_SETTINGS.Toggle.ActiveColor or DEFAULT_SETTINGS.Toggle.InactiveColor
            toggleBtn.BackgroundColor3 = DEFAULT_SETTINGS.Toggle.ActiveColor:Lerp(Color3.new(1,1,1), 0.3)
            task.delay(DEFAULT_SETTINGS.Toggle.PressEffectDuration, function()
                toggleBtn.BackgroundColor3 = originalColor
            end)
        end
        
        toggleBtn.MouseButton1Click:Connect(function()
            state = not state
            if state then
                toggleBtn.Text = (options.Text or "Toggle") .. " (ON)"
                toggleBtn.BackgroundColor3 = DEFAULT_SETTINGS.Toggle.ActiveColor
            else
                toggleBtn.Text = (options.Text or "Toggle") .. " (OFF)"
                toggleBtn.BackgroundColor3 = DEFAULT_SETTINGS.Toggle.InactiveColor
            end
            callback(state)
        end)
        
        table.insert(elements, toggleBtn)
        
        local toggle = {}
        function toggle:SetState(newState)
            state = newState
            if state then
                toggleBtn.Text = (options.Text or "Toggle") .. " (ON)"
                toggleBtn.BackgroundColor3 = DEFAULT_SETTINGS.Toggle.ActiveColor
            else
                toggleBtn.Text = (options.Text or "Toggle") .. " (OFF)"
                toggleBtn.BackgroundColor3 = DEFAULT_SETTINGS.Toggle.InactiveColor
            end
            callback(state)
        end
        function toggle:GetState()
            return state
        end
        return toggle
    end

    -- AddInput (оригинальная функция без изменений)
    function tabInstance:AddInput(options)
        options = options or {}
        local size = options.Size or DEFAULT_SETTINGS.ComponentSize
        
        local inputFrame = CreateProtectedInstance("Frame", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, size.X, 0, size.Y),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 
                                  0, options.Position and options.Position.Y or 0),
            BackgroundColor3 = DEFAULT_SETTINGS.Input.BackgroundColor,
            ZIndex = 2,
            Parent = elementsContainer
        })
        
        local inputCorner = CreateProtectedInstance("UICorner", {
            CornerRadius = UDim.new(0, DEFAULT_SETTINGS.Input.CornerRadius),
            Parent = inputFrame
        })
        
        local textBox = CreateProtectedInstance("TextBox", {
            Size = UDim2.new(1, -16, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            Text = "",
            PlaceholderText = options.Placeholder or "Enter text...",
            TextColor3 = DEFAULT_SETTINGS.Input.TextColor,
            PlaceholderColor3 = DEFAULT_SETTINGS.Input.PlaceholderColor,
            Font = DEFAULT_SETTINGS.Input.Font,
            TextSize = DEFAULT_SETTINGS.Input.TextSize,
            BackgroundTransparency = 1,
            ClearTextOnFocus = false,
            ZIndex = 3,
            Parent = inputFrame
        })
        
        applyTextPosition(textBox, "Left")
        
        local callback = options.Callback or function() end
        textBox:GetPropertyChangedSignal("Text"):Connect(function()
            callback(textBox.Text)
        end)
        
        if rulerX.Visible then
            addCenterMarks(inputFrame)
        end
        
        table.insert(elements, inputFrame)
        
        local inputObj = {}
        function inputObj:SetText(text)
            textBox.Text = text
        end
        function inputObj:GetText()
            return textBox.Text
        end
        function inputObj:SetPlaceholder(text)
            textBox.PlaceholderText = text
        end
        return inputObj
    end

    -- AddBind (оригинальная функция без изменений)
    function tabInstance:AddBind(options)
        options = options or {}
        local size = options.Size or DEFAULT_SETTINGS.ComponentSize
        local placeholder = options.Placeholder or "None"

        local bindFrame = CreateProtectedInstance("Frame", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, size.X, 0, size.Y),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 0, options.Position and options.Position.Y or 0),
            BackgroundColor3 = DEFAULT_SETTINGS.Bind.BackgroundColor,
            ZIndex = 2,
            Parent = elementsContainer
        })

        local bindCorner = CreateProtectedInstance("UICorner", {
            CornerRadius = UDim.new(0, DEFAULT_SETTINGS.Bind.CornerRadius),
            Parent = bindFrame
        })

        local bindLabel = CreateProtectedInstance("TextLabel", {
            Size = UDim2.new(1, -10, 1, 0),
            Position = UDim2.new(0, 5, 0, 0),
            Text = "Bind: " .. placeholder,
            TextColor3 = DEFAULT_SETTINGS.Bind.TextColor,
            Font = DEFAULT_SETTINGS.Bind.Font,
            TextSize = DEFAULT_SETTINGS.Bind.TextSize,
            BackgroundTransparency = 1,
            ZIndex = 3,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Center,
            Parent = bindFrame
        })

        local padding = CreateProtectedInstance("UIPadding", {
            PaddingLeft = UDim.new(0, 8),
            Parent = bindLabel
        })

        local currentKey = nil
        local waitingForKey = false

        bindFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                if not waitingForKey then
                    waitingForKey = true
                    bindLabel.Text = "Press any key..."

                    local connection
                    connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                        if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                            currentKey = input.KeyCode
                            bindLabel.Text = "Bind: " .. tostring(currentKey):gsub("Enum.KeyCode.", "")
                            waitingForKey = false
                            connection:Disconnect()
                            if options.Callback then
                                options.Callback(currentKey)
                            end
                        end
                    end)
                end
            end
        end)

        if rulerX.Visible then
            addCenterMarks(bindFrame)
        end

        table.insert(elements, bindFrame)

        local bindObj = {}
        function bindObj:SetKey(key)
            currentKey = key
            bindLabel.Text = "Bind: " .. tostring(currentKey):gsub("Enum.KeyCode.", "")
        end
        function bindObj:GetKey()
            return currentKey
        end
        return bindObj
    end

    -- AddBackground (оригинальная функция без изменений)
    function tabInstance:AddBackground(options)
        options = options or {}
        local size = options.Size or DEFAULT_SETTINGS.ComponentSize
        
        local background = CreateProtectedInstance("Frame", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, size.X, 0, size.Y),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 
                                     0, options.Position and options.Position.Y or 0),
            BackgroundColor3 = options.Color or DEFAULT_SETTINGS.Background.Color,
            ZIndex = 1,
            Parent = elementsContainer
        })
        
        local backgroundCorner = CreateProtectedInstance("UICorner", {
            CornerRadius = UDim.new(0, DEFAULT_SETTINGS.Background.CornerRadius),
            Parent = background
        })
        
        if rulerX.Visible then
            addCenterMarks(background)
        end
        
        table.insert(elements, background)
        
        local backgroundObj = {}
        function backgroundObj:SetColor(color)
            background.BackgroundColor3 = color
        end
        function backgroundObj:SetSize(newSize)
            background.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
        end
        function backgroundObj:SetPosition(newPos)
            background.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
        end
        return backgroundObj
    end

    -- AddDropdown (оригинальная функция без изменений)
    function tabInstance:AddDropdown(options)
        options = options or {}
        local size = options.Size or Vector2.new(200, 35)
        local items = options.Items or {}
        local callback = options.Callback or function() end
        local searchEnabled = options.Search or false
        
        local dropdown = CreateProtectedInstance("Frame", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            Size = UDim2.new(0, size.X, 0, size.Y),
            Position = UDim2.new(0, options.Position and options.Position.X or 0, 
                                       0, options.Position and options.Position.Y or 0),
            BackgroundColor3 = DEFAULT_SETTINGS.Dropdown.BackgroundColor,
            ZIndex = 2,
            Parent = elementsContainer
        })
        
        local dropdownCorner = CreateProtectedInstance("UICorner", {
            Parent = dropdown
        })
        
        local selected = CreateProtectedInstance("TextLabel", {
            Size = UDim2.new(1, -30, 1, 0),
            Position = UDim2.new(0, 8, 0, 0),
            Text = options.Text or "Select an item",
            TextColor3 = DEFAULT_SETTINGS.Dropdown.TextColor,
            BackgroundTransparency = 1,
            Font = DEFAULT_SETTINGS.Dropdown.Font,
            TextSize = options.TextSize or DEFAULT_SETTINGS.Dropdown.TextSize,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Center,
            ZIndex = 3,
            Parent = dropdown
        })
        
        local arrow = CreateProtectedInstance("TextLabel", {
            Size = UDim2.new(0, 20, 1, 0),
            Position = UDim2.new(1, -20, 0, 0),
            Text = "▼",
            TextColor3 = DEFAULT_SETTINGS.Dropdown.TextColor,
            BackgroundTransparency = 1,
            Font = DEFAULT_SETTINGS.Dropdown.Font,
            TextSize = options.TextSize or DEFAULT_SETTINGS.Dropdown.TextSize,
            TextXAlignment = Enum.TextXAlignment.Center,
            TextYAlignment = Enum.TextYAlignment.Center,
            ZIndex = 3,
            Parent = dropdown
        })
        
        local searchBox = CreateProtectedInstance("TextBox", {
            Size = UDim2.new(1, -10, 1, 0),
            Position = UDim2.new(0, 5, 0, 0),
            BackgroundColor3 = DEFAULT_SETTINGS.Dropdown.SearchInputColor,
            TextColor3 = DEFAULT_SETTINGS.Dropdown.SearchTextColor,
            Font = DEFAULT_SETTINGS.Dropdown.Font,
            TextSize = DEFAULT_SETTINGS.Dropdown.TextSize,
            Text = "",
            PlaceholderText = "Search...",
            Visible = false,
            ZIndex = 5,
            Parent = dropdown
        })
        
        local searchCorner = CreateProtectedInstance("UICorner", {
            Parent = searchBox
        })
        
        local listFrame = CreateProtectedInstance("ScrollingFrame", {
            AnchorPoint = Vector2.new(0.5, 0),
            Size = UDim2.new(0, size.X, 0, 0),
            Position = UDim2.new(dropdown.Position.X.Scale, dropdown.Position.X.Offset, 0, dropdown.Position.Y.Offset + size.Y/2 + 5),
            BackgroundColor3 = DEFAULT_SETTINGS.Dropdown.ListBackground,
            ClipsDescendants = true,
            ScrollBarThickness = 6,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            ZIndex = 4,
            Parent = elementsContainer
        })
        
        local listCorner = CreateProtectedInstance("UICorner", {
            Parent = listFrame
        })
        
        local open = false
        local filteredItems = items
        
        local function updateItems()
            for _, child in ipairs(listFrame:GetChildren()) do
                if child:IsA("TextButton") then
                    child:Destroy()
                end
            end
            
            for i, item in ipairs(filteredItems) do
                local button = CreateProtectedInstance("TextButton", {
                    Size = UDim2.new(1, -6, 0, 30),
                    Position = UDim2.new(0, 0, 0, (i - 1) * 30),
                    Text = item,
                    BackgroundColor3 = DEFAULT_SETTINGS.Dropdown.ItemBackground,
                    TextColor3 = DEFAULT_SETTINGS.Dropdown.ItemTextColor,
                    Font = DEFAULT_SETTINGS.Dropdown.ItemFont,
                    TextSize = DEFAULT_SETTINGS.Dropdown.ItemTextSize,
                    AutoButtonColor = false,
                    ZIndex = 5,
                    Parent = listFrame
                })
                
                local buttonCorner = CreateProtectedInstance("UICorner", {
                    Parent = button
                })
                
                button.MouseButton1Click:Connect(function()
                    selected.Text = item
                    arrow.Text = "▼"
                    open = false
                    listFrame.Visible = false
                    if searchEnabled then
                        searchBox.Visible = false
                        selected.Visible = true
                        arrow.Visible = true
                        searchBox.Text = ""
                    end
                    callback(item)
                end)
            end
            listFrame.CanvasSize = UDim2.new(0, 0, 0, #filteredItems * 30)
        end
        
        local function toggleDropdown()
            open = not open
            if open then
                arrow.Text = "▲"
                if searchEnabled then
                    searchBox.Visible = true
                    selected.Visible = false
                    arrow.Visible = false
                    searchBox:CaptureFocus()
                end
                updateItems()
                listFrame.Visible = true
                TweenService:Create(listFrame, TweenInfo.new(0.25), {
                    Size = UDim2.new(0, size.X, 0, math.min(#filteredItems * 30, 200))
                }):Play()
            else
                arrow.Text = "▼"
                if searchEnabled then
                    searchBox.Visible = false
                    selected.Visible = true
                    arrow.Visible = true
                    searchBox.Text = ""
                end
                TweenService:Create(listFrame, TweenInfo.new(0.25), {
                    Size = UDim2.new(0, size.X, 0, 0)
                }):Play()
                task.delay(0.25, function()
                    if not open then
                        listFrame.Visible = false
                    end
                end)
            end
        end
        
        dropdown.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                toggleDropdown()
            end
        end)
        
        if searchEnabled then
            searchBox.FocusLost:Connect(function(enterPressed)
                if not open then return end
                local searchText = string.lower(searchBox.Text)
                if searchText == "" then
                    filteredItems = items
                else
                    filteredItems = {}
                    for _, item in ipairs(items) do
                        if string.find(string.lower(item), searchText, 1, true) then
                            table.insert(filteredItems, item)
                        end
                    end
                end
                updateItems()
                TweenService:Create(listFrame, TweenInfo.new(0.25), {
                    Size = UDim2.new(0, size.X, 0, math.min(#filteredItems * 30, 200))
                }):Play()
            end)
            
            searchBox:GetPropertyChangedSignal("Text"):Connect(function()
                local searchText = string.lower(searchBox.Text)
                if searchText == "" then
                    filteredItems = items
                else
                    filteredItems = {}
                    for _, item in ipairs(items) do
                        if string.find(string.lower(item), searchText, 1, true) then
                            table.insert(filteredItems, item)
                        end
                    end
                end
                updateItems()
                TweenService:Create(listFrame, TweenInfo.new(0.25), {
                    Size = UDim2.new(0, size.X, 0, math.min(#filteredItems * 30, 200))
                }):Play()
            end)
        end
        
        if rulerX.Visible then
            addCenterMarks(dropdown)
        end
        
        table.insert(elements, dropdown)
        table.insert(elements, listFrame)
        
        local dropdownObj = {}
        function dropdownObj:SetItems(newItems)
            items = newItems
            filteredItems = newItems
            if open then
                updateItems()
            end
        end
        function dropdownObj:SetSelected(text)
            selected.Text = text
        end
        function dropdownObj:GetSelected()
            return selected.Text
        end
        function dropdownObj:IsOpen()
            return open
        end
        return dropdownObj
    end
    
    return tabInstance
end

return PizdecWareUI
